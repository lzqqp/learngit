# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import closeloop_hdmap_pb2 as closeloop__hdmap__pb2
import closeloop_metric_pb2 as closeloop__metric__pb2
import closeloop_params_pb2 as closeloop__params__pb2


class MetricServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StartMetric = channel.unary_unary(
        '/adu.workers.closeloop.MetricService/StartMetric',
        request_serializer=closeloop__metric__pb2.Metric.SerializeToString,
        response_deserializer=closeloop__metric__pb2.MetricACK.FromString,
        )
    self.StopMetric = channel.unary_unary(
        '/adu.workers.closeloop.MetricService/StopMetric',
        request_serializer=closeloop__metric__pb2.Metric.SerializeToString,
        response_deserializer=closeloop__metric__pb2.MetricResult.FromString,
        )


class MetricServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def StartMetric(self, request, context):
    """start metric
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StopMetric(self, request, context):
    """stop metric
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MetricServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StartMetric': grpc.unary_unary_rpc_method_handler(
          servicer.StartMetric,
          request_deserializer=closeloop__metric__pb2.Metric.FromString,
          response_serializer=closeloop__metric__pb2.MetricACK.SerializeToString,
      ),
      'StopMetric': grpc.unary_unary_rpc_method_handler(
          servicer.StopMetric,
          request_deserializer=closeloop__metric__pb2.Metric.FromString,
          response_serializer=closeloop__metric__pb2.MetricResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adu.workers.closeloop.MetricService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class HDMapServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetHDmapInfo = channel.unary_unary(
        '/adu.workers.closeloop.HDMapService/GetHDmapInfo',
        request_serializer=closeloop__params__pb2.Point.SerializeToString,
        response_deserializer=closeloop__hdmap__pb2.HDMapParams.FromString,
        )


class HDMapServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetHDmapInfo(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HDMapServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetHDmapInfo': grpc.unary_unary_rpc_method_handler(
          servicer.GetHDmapInfo,
          request_deserializer=closeloop__params__pb2.Point.FromString,
          response_serializer=closeloop__hdmap__pb2.HDMapParams.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adu.workers.closeloop.HDMapService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
